package cn.focus.estatedic.demo;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.util.List;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import org.ansj.domain.Term;
import org.ansj.recognition.NatureRecognition;
import org.ansj.splitWord.analysis.NlpAnalysis;
import org.ansj.util.FilterModifWord;

public class Test {
	
	public static void main(String argv[]) throws IOException {
				
		String regxpForHtml = "<([^>]*)>"; // 过滤所有以<开头以>结尾的标签   
		String pageHtml = "\\[[0-9]*\\]";
		Preprocess proc = new Preprocess(10);
		proc.initStopWordsAndStopNatures();
		File file = new File("/home/zhiweiwen/workspace/estatedic/dicConfig/estateNews/296081.txt");
		BufferedReader br = new BufferedReader(new FileReader(file));
		StringBuffer sb = new StringBuffer("");
		String line = "";
		System.out.println("read file!");
		while((line=br.readLine())!=null) {
			sb.append(line);
		}
		System.out.println("read file over!");
		String str = sb.toString();
		sb = new StringBuffer("");
		
		Pattern p = Pattern.compile(regxpForHtml);
		Matcher m = p.matcher(str);
		while(m.find()) {
			m.appendReplacement(sb, "");
		}
		m.appendTail(sb);
		str = sb.toString();
		sb = new StringBuffer("");
		
		p = Pattern.compile(pageHtml);
		m = p.matcher(str);
		while(m.find()) {
			m.appendReplacement(sb, "");
		}
		m.appendTail(sb);
		str = sb.toString();
		//str
		
		for(int i=0;i<100000;i++) {
		
		List<Term> parse = NlpAnalysis.parse(str);
		System.out.println("nature the " + i +  " terms!!");
		new NatureRecognition(parse).recognition();
		List<Term> terms = FilterModifWord.modifResult(parse);
		System.out.println("end nature the " + i +  " terms!!");
		
		}
		
	}

}
